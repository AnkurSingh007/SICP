# lang racket

(define (good-enough? guess x) ( <
                                 ( /
                                  (abs (- (improve guess x) guess)) guess)
                                0.001))

(define (improve guess x)
  ( /
    ( + (* 2 guess)
        (/ x (square guess)))
    3))

(define (average x y)
  (/ (+ x y) 2))

(define (cube-root-iter guess x)
  (if (good-enough? guess x)
      guess
      (cube-root-iter (improve guess x)
                 x)))

(define (cube-root x)
  (cube-root-iter 1.0 x))

(define (square a)(* a a))

(define (cube a)(* a (* a a)))  

(cube (cube-root .001))
