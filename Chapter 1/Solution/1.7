# lang racket

(define (good-enough? guess x) ( <
                                 ( /
                                  (abs (- (improve guess x) guess)) guess)
                                0.0001))

(define (improve guess x)
  (average guess (/ x guess)))

(define (average x y)
  (/ (+ x y) 2))

(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x)
                 x)))

(define (my-sqrt x)
  (sqrt-iter 1.0 x))

(define (square a)(* a a))

(square (my-sqrt 0.0009))
